function! s:config_onehalfdark()
  hi clear SpellBad
  hi SpellBad gui=undercurl cterm=underline guisp=RED
  "hi SpellBad gui=NONE guifg=NONE ctermfg=NONE cterm=NONE term=NONE guisp=NONE
endfunction
autocmd colorscheme onehalfdark call s:config_onehalfdark()
colorscheme onehalfdark
"packadd vim-dirvish "ファイラー
"packadd fzf.vim "ファイルのあいまい検索
"packadd fzf "fzf.vimの依存
"packadd migemo "日本語のアルファベット検索
""packadd nerdtree "ファイラー
packadd indentLine "インデントを見やすくする
"packadd vim-markdown "マークダウン用プラグイン
"packadd vim-ps1 "powershellのシンタックス{
" packadd AutoComplPop "自動保管
"
"非同期のコードチェッカー{
  let g:ale_completion_enabled = 1
  packadd ale 
"  let g:ale_linters = {'scala': ['sbtserver'],'python':['flake8']}
  let g:ale_lint_on_save = 1
  let g:ale_sign_column_always = 1
"}

"見た目のカスタマイズ{
  packadd onehalf
  packadd vim-airline 
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline#extensions#tabline#formatter = 'unique_tail'
  nmap <Tab> <Plug>AirlineSelectNextTab
  nmap <S-Tab> <Plug>AirlineSelectPrevTab
  packadd vim-airline-themes
  AirlineTheme onehalfdark
"}

"マークダウンのプレビュー表示{
"  packadd previm 
"  let g:previm_open_cmd='start'
""}

"自動保存{
  "packadd vim-auto-save 
  "let g:auto_save = 1  " enable AutoSave on Vim startup
  "let g:auto_save_silent = 1  " do not display the auto-save notification
"}


"自動補完{
  "packadd neocomplete.vim
  "NeoCompleteEnable
"}

"scala用プラグイン{
"  packadd vim-scala "scalaシンタックスプラグイン
"  packadd ensime-vim "scala補完プラグイン
"}

"" omni用の自動保管{
"  packadd vim-hug-neovim-rpc "deopleteの依存
"  packadd nvim-yarp "deopleteの依存
"  let g:deoplete#enable_at_startup = 1
"  let g:deoplete#auto_complete_delay = 0
"  let g:deoplete#auto_complete_start_length = 1
"  let g:deoplete#enable_camel_case = 0
"  let g:deoplete#enable_ignore_case = 0
"  let g:deoplete#enable_refresh_always = 0
"  let g:deoplete#enable_smart_case = 1
"  let g:deoplete#file#enable_buffer_path = 1
"  let g:deoplete#max_list = 50
"  packadd deoplete.nvim
"  call deoplete#custom#option('omni_patterns', {'scala': '[^. *\t]\.'}) "omniが発動するタイミング
"  call deoplete#custom#option('keyword_patterns', { 'scala': ''}) "omni以外は使わない
"" }

"python用プラグイン{
"  packadd jedi-vim
"  autocmd FileType python setlocal omnifunc=jedi#completions
"  let g:jedi#show_call_signatures=2
"  let g:jedi#show_call_signatures_delay=0
"}

"vim-lsp
"  packadd async.vim
"  packadd vim-lsp
"  if executable('rls')
"      let g:lsp_diagnostics_enabled = 0 " エラー表示はALEで行う
"      au User lsp_setup call lsp#register_server({
"          \ 'name': 'rls',
"          \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
"          \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
"          \ 'whitelist': ['rust'],
"          \ })
"            " .か:を押したときに自動的にオムニ補完
"      autocmd FileType rust imap <expr> . ".\<C-X>\<C-O>"
"      autocmd FileType rust imap <expr> : ":\<C-X>\<C-O>"
"      autocmd FileType rust setlocal omnifunc=lsp#complete
"  endif


if executable('node')
  packadd coc.nvim
  call coc#config('coc.preferences.diagnostic', {'displayByAle':'true'})
endif
"
"
"
"" if hidden is not set, TextEdit might fail.
"set hidden
"
"" Some servers have issues with backup files, see #649
"set nobackup
"set nowritebackup
"
"" Better display for messages
"set cmdheight=2
"
"" You will have bad experience for diagnostic messages when it's default 4000.
"set updatetime=300
"
"" don't give |ins-completion-menu| messages.
"set shortmess+=c
"
"" always show signcolumns
"set signcolumn=yes
"
"" Use tab for trigger completion with characters ahead and navigate.
"" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
"
"function! s:check_back_space() abort
"  let col = col('.') - 1
"  return !col || getline('.')[col - 1]  =~# '\s'
"endfunction
"
"" Use <c-space> to trigger completion.
"inoremap <silent><expr> <c-space> coc#refresh()
"
"" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
"" Coc only does snippet and additional edit on confirm.
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"" Or use `complete_info` if your vim support it, like:
"" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
"
"" Use `[g` and `]g` to navigate diagnostics
"nmap <silent> [g <Plug>(coc-diagnostic-prev)
"nmap <silent> ]g <Plug>(coc-diagnostic-next)
"
"" Remap keys for gotos
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)
"
"" Use K to show documentation in preview window
"nnoremap <silent> K :call <SID>show_documentation()<CR>
"
"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  else
"    call CocAction('doHover')
"  endif
"endfunction
"
"" Highlight symbol under cursor on CursorHold
"autocmd CursorHold * silent call CocActionAsync('highlight')
"
"" Remap for rename current word
"nmap <leader>rn <Plug>(coc-rename)
"
"" Remap for format selected region
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)
"
"augroup mygroup
"  autocmd!
"  " Setup formatexpr specified filetype(s).
"  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"  " Update signature help on jump placeholder
"  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"augroup end
"
"" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>a  <Plug>(coc-codeaction-selected)
"
"" Remap for do codeAction of current line
"nmap <leader>ac  <Plug>(coc-codeaction)
"" Fix autofix problem of current line
"nmap <leader>qf  <Plug>(coc-fix-current)
"
"" Create mappings for function text object, requires document symbols feature of languageserver.
"xmap if <Plug>(coc-funcobj-i)
"xmap af <Plug>(coc-funcobj-a)
"omap if <Plug>(coc-funcobj-i)
"omap af <Plug>(coc-funcobj-a)
"
"" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
"nmap <silent> <C-d> <Plug>(coc-range-select)
"xmap <silent> <C-d> <Plug>(coc-range-select)
"
"" Use `:Format` to format current buffer
"command! -nargs=0 Format :call CocAction('format')
"
"" Use `:Fold` to fold current buffer
"command! -nargs=? Fold :call     CocAction('fold', <f-args>)
"
"" use `:OR` for organize import of current buffer
"command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
"
"" Add status line support, for integration with other plugin, checkout `:h coc-status`
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"
"" Using CocList
"" Show all diagnostics
"nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
"" Manage extensions
"nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
"" Show commands
"nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
"" Find symbol of current document
"nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
"" Search workspace symbols
"nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
"" Do default action for next item.
"nnoremap <silent> <space>j  :<C-u>CocNext<CR>
"" Do default action for previous item.
"nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
"" Resume latest coc list
"nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


autocmd BufNewFile,BufRead *.yar,*.yara setlocal filetype=yara
function! s:config_yara()
  packadd vim-syntax-yara
endfunction
autocmd FileType yara call s:config_yara()

function! s:config_markdown()
  packadd previm 
  let g:previm_open_cmd='start'
endfunction
autocmd FileType markdown call s:config_markdown()
