" onehalfdarkのALE用カスタマイズ
function! s:config_onehalfdark()
  hi clear SpellBad
  hi SpellBad gui=undercurl cterm=underline guisp=RED
  hi clear SpellCap
  hi SpellCap gui=undercurl cterm=underline guisp=Yellow
endfunction
autocmd colorscheme onehalfdark call s:config_onehalfdark()
packadd onehalf
colorscheme onehalfdark

" ファイラー
packadd nerdtree
let g:NERDTreeQuitOnOpen = 1
nnoremap <silent><C-e> :NERDTreeToggle<CR>

"インデントを見やすくする
packadd indentLine

"非同期のコードチェッカー{
let g:ale_completion_enabled = 1
packadd ale 
let g:ale_lint_on_save = 1
let g:ale_sign_column_always = 1

"見た目のカスタマイズ
packadd vim-airline 
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'
nmap <Tab> <Plug>AirlineSelectNextTab
nmap <S-Tab> <Plug>AirlineSelectPrevTab
packadd vim-airline-themes
AirlineTheme onehalfdark

"python用プラグイン{
"  packadd jedi-vim
"  autocmd FileType python setlocal omnifunc=jedi#completions
"  let g:jedi#show_call_signatures=2
"  let g:jedi#show_call_signatures_delay=0
"}

"vim-lspの一般設定。言語ごとの設定は下のほう
packadd async.vim
packadd vim-lsp
let g:lsp_diagnostics_enabled = 0 " エラー表示はALEで行う
function! s:configure_lsp() abort
  setlocal omnifunc=lsp#complete   " オムニ補完を有効化
  " LSP用にマッピング
  nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
  nnoremap <buffer> gd :<C-u>LspDefinition<CR>
  nnoremap <buffer> gD :<C-u>LspReferences<CR>
  nnoremap <buffer> gs :<C-u>LspDocumentSymbol<CR>
  nnoremap <buffer> gS :<C-u>LspWorkspaceSymbol<CR>
  nnoremap <buffer> gQ :<C-u>LspDocumentFormat<CR>
  vnoremap <buffer> gQ :LspDocumentRangeFormat<CR>
  nnoremap <buffer> K :<C-u>LspHover<CR>
  nnoremap <buffer> <F1> :<C-u>LspImplementation<CR>
  nnoremap <buffer> <F2> :<C-u>LspRename<CR>
endfunction

"yara用設定
autocmd BufNewFile,BufRead *.yar,*.yara setlocal filetype=yara
function! s:config_yara()
  packadd vim-syntax-yara
endfunction
autocmd FileType yara call s:config_yara()

" markdown用設定
function! s:config_markdown()
  packadd vim-markdown
  packadd previm 
  let g:previm_open_cmd='start'
endfunction
autocmd FileType markdown call s:config_markdown()

" ps1用設定
function! s:config_ps1()
  packadd vim-ps1
endfunction
autocmd FileType ps1 call s:config_ps1()

"rust用設定
if executable('rls')
    augroup lsp_rls_enable
        autocmd!
        au User lsp_setup call lsp#register_server({
            \ 'name': 'rls',
            \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
            \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
            \ 'whitelist': ['rust'],
            \ })
        autocmd FileType rust call s:configure_lsp()
        autocmd FileType rust imap <expr> . ".\<C-X>\<C-O>"
        autocmd FileType rust imap <expr> : ":\<C-X>\<C-O>"
    augroup end
endif


"python用設定
if executable('pyls')
    augroup lsp_pyls_enable
        autocmd!
        autocmd User lsp_setup call lsp#register_server({
                    \ 'name': 'pyls',
                    \ 'cmd': {server_info->['pyls']},
                    \ 'whitelist': ['python'],
                    \ })
        autocmd FileType python call s:configure_lsp()
    augroup end
endif
